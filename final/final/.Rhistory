gsub('\\{','',split)
split
split = gsub('\\{|\\}', '', split)
split
unlist(strsplit(split, ':'))
split = gsub('\\{|\\}', '', split)
#split = gsub('\\}', '', split)
values = unlist(strsplit(split, ':'))
values
# Parse out what will be the df headers
headers = values[seq(1, length(values), 2)]
headers
fromJSON(d)
df_device <- paste("[", paste(df$device, collapse = ","), "]") %>% fromJSON(flatten = T)
View(df_device)
df_device <- paste("[", paste(df_raw$device, collapse = ","), "]") %>% fromJSON(flatten = T)
View(df_device)
df_raw$trafficSource[1]
df_device <- paste("[", paste(df_raw$device, collapse = ","), "]") %>% fromJSON(flatten = T)
df_geoNetwork <- paste("[", paste(df_raw$geoNetwork, collapse = ","), "]") %>% fromJSON(flatten = T)
df_totals <- paste("[", paste(df_raw$totals, collapse = ","), "]") %>% fromJSON(flatten = T)
df_trafficSource <- paste("[", paste(df_raw$trafficSource, collapse = ","), "]") %>% fromJSON(flatten = T)
df <- df_raw %>%
cbind(df_device, df_geoNetwork, df_totals, df_trafficSource) %>%
select(-device, -geoNetwork, -totals, -trafficSource)
factorVars <- c("channelGrouping", "browser", "operatingSystem", "deviceCategory", "country")
df[, factorVars] <- lapply(df[, factorVars], as.factor)
df$transactionRevenue <- as.numeric(df$transactionRevenue)
numVars <- c("visits", "hits", "bounces", "pageviews", "newVisits")
df[, numVars] <- lapply(df[, numVars], as.integer)
df$visitStartTime <- as.POSIXct(df$visitStartTime, tz="UTC", origin='1970-01-01')
write.csv(df, here('data','clean_train_jack.csv'), row.names = FALSE)
write.csv(df, here('kaggle_files','clean_train_jack.csv'), row.names = FALSE)
?write.csv
here('kaggle_files','clean_train_jack.csv')
write.csv(df, './kaggle_files/clean_train_jack.csv', row.names = FALSE)
write.csv(df, 'clean_train_jack.csv', row.names = FALSE)
df <- df %>% mutate(date=ymd(date))
?ymd
library(lubridate)
df <- df %>% mutate(date=ymd(date))
nan_count <- sum(!is.na(df$transactionRevenue))
nan_count
nan_count <- sum(!is.na(df$transactionRevenue))
nan_pct <- nan_count / nrow(df) * 100
nan_pct
total_rev <- sum(df$transactionRevenue, na.rm=T)
total_rev
library(car)
car::powerTransform(df$transactionRevenue)
?gg_miss_var
??gg_miss_var
install.packages('naniar')
library(naniar)
library(naniar)
df <- df %>%
mutate(transactionRevenue=log(transactionRevenue),
transactionRevenue=replace_na(transactionRevenue,0))
gg_miss_var(df %>% filter(transactionRevenue > 0), show_pct = TRUE)
stats::acf(df$transactionRevenue, lag.max=17,plot=TRUE)
nan_count <- sum(!is.na(df$transactionRevenue))
nan_count
df <- df %>%
mutate(transactionRevenue=log(transactionRevenue),
transactionRevenue=replace_na(transactionRevenue,0))
nan_count <- sum(!is.na(df$transactionRevenue))
nan_count
temp<-replace_na(df$transactionRevenue,0)
sum(is.na(temp))
stats::acf(df$transactionRevenue%>%filter(df$transactionRevenue>0), lag.max=17,plot=TRUE)
stats::acf(df$transactionRevenue, lag.max=17,plot=TRUE)
df %>%
select_if(negate(is.numeric))
temp<-df$[1:100]
temp<-df$[1:100,]
temp<-df[1:100,]
view(temp)
stats::acf(df$transactionRevenue, lag.max=3,plot=TRUE)
stats::acf(na.omit(df$transactionRevenue), lag.max=3,plot=TRUE)
stats::acf(na.omit(df$transactionRevenue), lag.max=17,plot=TRUE)
view(df$date)
View(df)
library(lubridate)
df <- df %>% mutate(date=ymd(date))
nan_count <- sum(!is.na(df$transactionRevenue))
nan_pct <- nan_count / nrow(df) * 100
total_rev <- sum(df$transactionRevenue, na.rm=T)
class(df$date)
?stats::acf
df$date[1]
min(df$date)
max(df$date)
View(df)
stats::acf(na.omit(df$transactionRevenue), lag.max=14,plot=TRUE)
df%>%group_by(date)%>%summarize(mean_rev=mean(transactionRevenue))
df %>% group_by(date) %>% summarise(Mean_sales = mean(Sales))
df %>% group_by(date) %>% summarise(Mean_sales = mean(transactionRevenue))
df %>% group_by(as.character(date)) %>% summarise(Mean_sales = mean(transactionRevenue))
df %>% group_by(as.character(date)) %>% summarise(Mean_sales = mean(na.omit(transactionRevenue)))
df %>% group_by_(date) %>% summarise(Mean_sales = mean(na.omit(transactionRevenue)))
df%>%summarise_by_time(.date_var=date,.by='day',value=mean(transactionRevenue))
?summarize_by_time
??summarize_by_time
install.packages('timetk')
library(timetke)
library(timetk)
df%>%summarise_by_time(.date_var=date,.by='day',value=mean(transactionRevenue))
df%>%summarise_by_time(.date_var=date,.by='day',value=mean(na.omit(transactionRevenue)))
timeseries<-df%>%summarise_by_time(.date_var=date,.by='day',value=mean(na.omit(transactionRevenue)))
stats::acf(timeseries,lag.max = 14,plot=TRUE)
stats::acf(na.omit(timeseries$value),lag.max = 14,plot=TRUE)
stats::acf(na.omit(timeseries$value),lag.max = 7,plot=TRUE)
df <- df %>%
df <- df %>%
mutate(transactionRevenue=log(transactionRevenue))
log(1)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
file<-here('kaggle_files','train.csv')
df_raw<-read.csv(file)
colnames(df_raw)
colnames(df_raw)
df_raw$channelGrouping<-as.factor(df_raw$channelGrouping)
levels(as.factor(df_raw$channelGrouping))
#function for turning python dictionary to a R dataframe
dict_df <-function(d){
}
dict_to_df = function(dict) {
require(plyr)
df = data.frame()
df_temp = list()
store = list()
for (i in 1:length(dict)) {
# Split up the dictionary entry
split = unlist(strsplit(dict[i], '\",'))
split = gsub('\\{|\\}', '', split)
#split = gsub('\\}', '', split)
values = unlist(strsplit(split, ':'))
# Parse out what will be the df headers
headers = values[seq(1, length(values), 2)]
headers = gsub('\"', '', headers) # Remove quotes
headers = gsub(' ', '', headers)  # and whitespace
# Parse out what will be the df values
row_values = values[seq(0, length(values), 2)]
row_values = gsub('\"', '', row_values) # Remove quotes
row_values = gsub(' ', '', row_values)  # and whitespace
# Construct a dataframe with 1 row
out = data.frame(t(row_values))
colnames(out) = headers
store[i] = list(out)
#if (i %% 1000 == 0) { print(round(i / length(dict), 2)) }
}
# rbind all the dataframes together into one dataframe
list_length = length(store)
# If the dictionary is sufficiently large rbind will be slow
# as all hell, so break the rbinding into multiple steps
if (list_length >= 3000) {
no_splits = round(list_length / 500)
chunks = split(store, 1:no_splits)
for (j in 1:no_splits) {
df_temp[j] = list(rbind.fill(chunks[[j]]))
}
df = rbind.fill(df_temp)
return(df)
}
else {
df = rbind.fill(store)
return(df)
}
}
df_total<-dict_to_df(df_raw$totals)
df_device <- paste("[", paste(df_raw$device, collapse = ","), "]") %>% fromJSON(flatten = T)
library(jsonlite)
library(jsonlite)
df_device <- paste("[", paste(df_raw$device, collapse = ","), "]") %>% fromJSON(flatten = T)
df_geoNetwork <- paste("[", paste(df_raw$geoNetwork, collapse = ","), "]") %>% fromJSON(flatten = T)
df_totals <- paste("[", paste(df_raw$totals, collapse = ","), "]") %>% fromJSON(flatten = T)
df_trafficSource <- paste("[", paste(df_raw$trafficSource, collapse = ","), "]") %>% fromJSON(flatten = T)
df <- df_raw %>%
cbind(df_device, df_geoNetwork, df_totals, df_trafficSource) %>%
select(-device, -geoNetwork, -totals, -trafficSource)
factorVars <- c("channelGrouping", "browser", "operatingSystem", "deviceCategory", "country")
df[, factorVars] <- lapply(df[, factorVars], as.factor)
df$transactionRevenue <- as.numeric(df$transactionRevenue)
numVars <- c("visits", "hits", "bounces", "pageviews", "newVisits")
df[, numVars] <- lapply(df[, numVars], as.integer)
df$visitStartTime <- as.POSIXct(df$visitStartTime, tz="UTC", origin='1970-01-01')
write.csv(df, 'clean_train_jack.csv', row.names = FALSE)
getwd()
here()
here::here()
?write.csv
write.csv(df, '/kaggle_files/clean_train_jack.csv', row.names = FALSE)
write.csv(df, './kaggle_files/clean_train_jack.csv', row.names = FALSE)
write.csv(df, '/kaggle_files/clean_train_jack.csv', row.names = FALSE)
write.csv(df, '\kaggle_files\clean_train_jack.csv', row.names = FALSE)
write.csv(df, '.\kaggle_files\clean_train_jack.csv', row.names = FALSE)
write.csv(df, '.\\kaggle_files\\clean_train_jack.csv', row.names = FALSE)
write.csv(df, 'train_clean_jack.csv', row.names = FALSE)
write.csv(df, file='train_clean_jack.csv', row.names = FALSE)
write_csv(df, file='train_clean_jack.csv', row.names = FALSE)
?write_csv
library(readr)
library(readr)
write_csv(df, file='train_clean_jack.csv', row.names = FALSE)
write_csv(df, file='train_clean_jack.csv')
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
here::here()
gc()
#load csv
df<-read.csv(here('kaggle_files','train_clean_jack.csv'))
#load csv
df<-read.csv(here('kaggle_files','train_clean_jack.csv'), header=TRUE)
here::here()
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
train<-read.csv(here('kaggle_files','train_clean_jack.csv'))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
#load csv
df<-read.csv(here('kaggle_files','train_clean_jack.csv'), header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
file<-here('kaggle_files','train.csv')
df_raw<-read.csv(file)
library(shiny); runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
install.packages('shinyjs')
install.packages('shinydashboard')
install.packages("shinydashboard")
library(shiny); runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
?negate
library(tidyverse)
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('response_variable_app.R')
runApp('response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/response_variable_app.R')
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(d(),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(d())
})
# Generate an HTML table view of the data ----
output$table <- renderTable({
d()
})
}
shinyApp(ui,server)
source("~/.active-rstudio-document")
shinyApp(ui,server)
shinyApp(
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
),
server = function(input, output) {
}
)
shinyApp(ui,server)
source("~/.active-rstudio-document")
shinyApp(
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
),
server = function(input, output) {
}
)
shinyApp(ui,server)
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
)
library(shiny)
library(plotly)
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
)
)
}
ui = fluidPage(
tabsetPanel(
tabPanel("Map", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("plot", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
),
)
shinyApp(ui,server)
ui = fluidPage(
tabsetPanel(
tabPanel("Managing Response and Predictor Variables", fluid = TRUE,
sidebarLayout(
sidebarPanel(selectInput("Country", "Select Country", choices = "", selected = "")),
mainPanel(
htmlOutput("Attacks")
)
)
),
tabPanel("Transformations", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
),
tabPanel("Modeling", fluid = TRUE,
sidebarLayout(
sidebarPanel(sliderInput("year", "Year:", min = 1968, max = 2009, value = 2009, sep='')),
mainPanel(fluidRow(
column(7,  plotlyOutput("")),
column(5, plotlyOutput(""))
)
)
)
)
),
)
server<- function(input,output,session){
}
source("~/.active-rstudio-document")
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(shinyjs)
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
?n_distinct
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
shinyApp(ui, server)
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/asdfasdf.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
shinyApp(ui, server)
source("C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/asdfasdf.R")
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/asdfasdf.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/app_with_tabs_frame.R')
runApp('C:/Program Files/GitHub/data_vis_final/regression_decision_tree/regression_app/asdfasdf.R')
882166/900000
(900000-882166)/900000
