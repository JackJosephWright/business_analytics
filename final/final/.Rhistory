my_str <- as.character(a[1])
my_str <- gsub(
pattern = ('\\\\'),
replacement = '',
x = my_str
)
my_str
df_1<-df_transaction(totals=strsplit(as.character(totals),":"))%>%unnest(totals)
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
a<-df_transaction$totals[1:10]
df_1<-df_transaction(totals=strsplit(as.character(totals),":"))%>%unnest(totals)
df_1<-df_transaction%>%(totals=strsplit(as.character(totals),":"))%>%unnest(totals)
df_1<-df_transaction%>%(totals=strsplit(as.character(totals),":"))%>%unnest(totals)
df_1<-df_transaction%>%(totals=strsplit(as.character(totals),":"))
df_1<-df_transaction$totals%>%(trsplit(,":"))
df_1<-df_transaction$totals%>%(strsplit(,":"))
strsplit(a,":")
a<-df_transaction$totals[1]
strsplit(a,":")
strsplit(a,":")%>%str_replace_all("\\","")
strsplit(a,":")%>%str_replace_all("\\\\","")
strsplit(a,":")%>%str_replace_all("","\\\\")
strsplit(a,":")%>%str_replace_all(" ","\\\\")
strsplit(a,":")%>%str_replace_all("\"\\\\\","")
dict_to_df = function(dict) {
require(plyr)
df = data.frame()
df_temp = list()
store = list()
for (i in 1:length(dict)) {
# Split up the dictionary entry
split = unlist(strsplit(dict[i], '\",'))
split = gsub('\\{', '', split)
split = gsub('\\}', '', split)
values = unlist(strsplit(split, ':'))
# Parse out what will be the df headers
headers = values[seq(1, length(values), 2)]
headers = gsub('\"', '', headers) # Remove quotes
headers = gsub(' ', '', headers)  # and whitespace
# Parse out what will be the df values
row_values = values[seq(0, length(values), 2)]
row_values = gsub('\"', '', row_values) # Remove quotes
row_values = gsub(' ', '', row_values)  # and whitespace
# Construct a dataframe with 1 row
out = data.frame(t(row_values))
colnames(out) = headers
store[i] = list(out)
if (i %% 1000 == 0) { print(round(i / length(dict), 2)) }
}
# rbind all the dataframes together into one dataframe
list_length = length(store)
# If the dictionary is sufficiently large rbind will be slow
# as all hell, so break the rbinding into multiple steps
if (list_length >= 3000) {
no_splits = round(list_length / 500)
chunks = split(store, 1:no_splits)
for (j in 1:no_splits) {
df_temp[j] = list(rbind.fill(chunks[[j]]))
}
df = rbind.fill(df_temp)
return(df)
}
else {
df = rbind.fill(store)
return(df)
}
}
strsplit(a,":")%>%str_replace_all("\"\\\\\,"")
strsplit(a,":")%>%str_replace_all("\\\\","")
strsplit(a,":")%>%str_replace_all('\"',"")
strsplit(a,":")%>%str_replace_all('\"',"")%>%str_remove("\\\\")
strsplit(a,":")%>%str_replace_all('\"',"")%>%str_remove_all("\\\\")
strsplit(a,":")%>%str_replace_all('\"',"")%>%str_remove_all("\\\\"&"\{|}")
strsplit(a,":")%>%str_replace_all('\"',"")%>%str_remove_all("\\\\")
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
file<-here('kaggle_files','train.csv')
df<-read.csv(file)
colnames(df)
df$channelGrouping<-as.factor(df$channelGrouping)
levels(as.factor(df$channelGrouping))
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
a<-df_transaction$totals[1]
dict_to_df = function(dict) {
require(plyr)
df = data.frame()
df_temp = list()
store = list()
for (i in 1:length(dict)) {
# Split up the dictionary entry
split = unlist(strsplit(dict[i], '\",'))
split = gsub('\\{', '', split)
split = gsub('\\}', '', split)
values = unlist(strsplit(split, ':'))
# Parse out what will be the df headers
headers = values[seq(1, length(values), 2)]
headers = gsub('\"', '', headers) # Remove quotes
headers = gsub(' ', '', headers)  # and whitespace
# Parse out what will be the df values
row_values = values[seq(0, length(values), 2)]
row_values = gsub('\"', '', row_values) # Remove quotes
row_values = gsub(' ', '', row_values)  # and whitespace
# Construct a dataframe with 1 row
out = data.frame(t(row_values))
colnames(out) = headers
store[i] = list(out)
if (i %% 1000 == 0) { print(round(i / length(dict), 2)) }
}
# rbind all the dataframes together into one dataframe
list_length = length(store)
# If the dictionary is sufficiently large rbind will be slow
# as all hell, so break the rbinding into multiple steps
if (list_length >= 3000) {
no_splits = round(list_length / 500)
chunks = split(store, 1:no_splits)
for (j in 1:no_splits) {
df_temp[j] = list(rbind.fill(chunks[[j]]))
}
df = rbind.fill(df_temp)
return(df)
}
else {
df = rbind.fill(store)
return(df)
}
}
a<-'{"cat_name": "Ella", "dwell_status": "tree_dweller", "coat_color": "gray, white, orange", "is_from_hell": "Y"}'
dict_to_df(a)
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
a<-df_transaction$totals[1]
a
a%>%str_remove("\\")
a%>%str_remove('\\"')
a%>%str_remove_all('\\"')
dict_to_df(a)
b<-dict_to_df(a)
View(b)
df_transaction<-df%>%filter(str_detect(totals,!'transaction'))
df_transaction<-df%>%filter(!str_detect(totals,'transaction'))
a<-df_transaction$totals[1]
a
a<-df_transaction$totals[11]
a
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
a<-df_transaction$totals[11]
a
df_transaction<-df%>%filter(str_detect(totals,'transaction'))
a<-df_transaction$totals[11]
dict_to_df(a)
a<-df_transaction$totals[1:10]
dict_to_df(a)
df_totals<-dict_to_df(df)
df_totals<-dict_to_df(df[1:100])
temp_df<-sample(df,100)
temp_df<-sample_n(df,100)
dict_to_df(temp_df)
dict_to_df(temp_df[1])
df[1]
df[1,]
df_total<-dict_to_df(df$totals)
View(df_total)
df<-cbind(df_raw%>%select(-totals),df_total)
file<-here('kaggle_files','train.csv')
library(tidyverse)
library(here)
file<-here('kaggle_files','train.csv')
library(tidyverse)
library(here)
df_raw<-read.csv(file)
df<-cbind(df_raw%>%select(-totals),df_total)
summary(df)
df$device[1]
df_device<-dict_to_df(df$device)
df_device<-dict_to_df(df$device)
summary(df$device)
df$device[2]
dict_to_df(df$device[2])
#function for turning python dictionary to a R dataframe
dict_to_df = function(dict) {
require(plyr)
df = data.frame()
df_temp = list()
store = list()
for (i in 1:length(dict)) {
# Split up the dictionary entry
split = unlist(strsplit(dict[i], '\",'))
split = gsub('\\{', '', split)
split = gsub('\\}', '', split)
values = unlist(strsplit(split, ':'))
# Parse out what will be the df headers
headers = values[seq(1, length(values), 2)]
headers = gsub('\"', '', headers) # Remove quotes
headers = gsub(' ', '', headers)  # and whitespace
# Parse out what will be the df values
row_values = values[seq(0, length(values), 2)]
row_values = gsub('\"', '', row_values) # Remove quotes
row_values = gsub(' ', '', row_values)  # and whitespace
# Construct a dataframe with 1 row
out = data.frame(t(row_values))
colnames(out) = headers
store[i] = list(out)
if (i %% 1000 == 0) { print(round(i / length(dict), 2)) }
}
# rbind all the dataframes together into one dataframe
list_length = length(store)
# If the dictionary is sufficiently large rbind will be slow
# as all hell, so break the rbinding into multiple steps
if (list_length >= 3000) {
no_splits = round(list_length / 500)
chunks = split(store, 1:no_splits)
for (j in 1:no_splits) {
df_temp[j] = list(rbind.fill(chunks[[j]]))
}
df = rbind.fill(df_temp)
return(df)
}
else {
df = rbind.fill(store)
return(df)
}
}
dict_to_df(df$device[2])
dict_to_df(df$device[2])
dict_to_df(df$device[2])
df_total1<-dict_to_df(df_raw$totals[1:10])
dict_to_df(df_raw$device)
dict_to_df(df_raw$device[10])
df_raw$device[10]
a<-"{\"browser\": \"Firefox\", \"browserVersion\": \"not available in demo dataset\", \"browserSize\": \"not available in demo dataset\", \"operatingSystem\": \"Windows\", \"operatingSystemVersion\": \"not available in demo dataset\", \"isMobile\": false, \"mobileDeviceBranding\": \"not available in demo dataset\", \"mobileDeviceModel\": \"not available in demo dataset\", \"mobileInputSelector\": \"not available in demo dataset\", \"mobileDeviceInfo\": \"not available in demo dataset\", \"mobileDeviceMarketingName\": \"not available in demo dataset\", \"flashVersion\": \"not available in demo dataset\", \"language\": \"not available in demo dataset\", \"screenColors\": \"not available in demo dataset\", \"screenResolution\": \"not available in demo dataset\", \"deviceCategory\": \"desktop\"}"
d<-"{\"browser\": \"Firefox\", \"browserVersion\": \"not available in demo dataset\", \"browserSize\": \"not available in demo dataset\", \"operatingSystem\": \"Windows\", \"operatingSystemVersion\": \"not available in demo dataset\", \"isMobile\": false, \"mobileDeviceBranding\": \"not available in demo dataset\", \"mobileDeviceModel\": \"not available in demo dataset\", \"mobileInputSelector\": \"not available in demo dataset\", \"mobileDeviceInfo\": \"not available in demo dataset\", \"mobileDeviceMarketingName\": \"not available in demo dataset\", \"flashVersion\": \"not available in demo dataset\", \"language\": \"not available in demo dataset\", \"screenColors\": \"not available in demo dataset\", \"screenResolution\": \"not available in demo dataset\", \"deviceCategory\": \"desktop\"}"
list<-str_split(d,',')
list
#remove quotes
list<-str_remove_all(list,'\"')
list
list<-str_split(d,',')
list
list<-as.data.frame(str_split(d,','))
list
View(list)
#remove brackets
d<-str_replace(d, "\\([^()]{0,}\\)", "")
d
#remove brackets
d<-str_replace(d, "\\([\{\}]{0,}\\)", "")
#remove brackets
d<-str_replace(d, "\\([\\{\\}]{0,}\\)", "")
d
#remove brackets
d<-str_replace(d, '\"\{}, "")
#remove brackets
d<-str_replace(d, '\"\{', "")
#remove brackets
d<-str_replace(d, '\"\\{', "")
d
#remove brackets
d<-str_remove('"{')
#remove brackets
d<-str_remove('["{]')
#remove brackets
d<-str_remove('[\"{]')
#remove brackets
d<-str_remove('[\"\{]')
#remove brackets
d<-str_remove('[\"\{\}]')
#remove brackets
d<-str_remove('[\\"\\{\\}]')
#remove brackets
d1<-str_remove(d,'[\\"\\{\\}]')
d1
#remove brackets
d1<-str_remove_all(d,'[\\"\\{\\}]')
d1
#remove brackets
dict<-str_remove_all(d,'[\\"\\{\\}]')
d_list<-str_split(dict,":")
d_list
d_list<-str_split(dict,",")
d_list
a<-d_list[1]
a
a
d_list[2]
d_list[1]
d_list[1][1]
d_list[[1]]
length(d_list)
#split dict into list items
d_list<-as.list(str_split(dict,","))
d_list
#split dict into list items
d_list<-str_split(dict,",").unlist()
#split dict into list items
d_list<-unlist(str_split(dict,","))
d_list
d_list[1]
a<-d_list[1]
str_extract(("(?<!:)(.+"))
str_extract(("(?<!:)
str_extract(("(?<!:))
str_extract(("(?<=:))
str_extract(("(?<=:))
str_extract(("(?<=:)))
str_extract(("(?<=:)))
str_extract(("(?<=:"),a)
str_extract(("(?<=:"),a)
str_view(("(?<=:"),a)
str_view(("(?<=:")(.+),a)
str_view(("(?<=:"),a)
str_view(a,(?<=:"))
str_view(a,'(?<=:)')
str_view(a,'(?<=:)(.+)')
str_extract(a,'(?<=:)(.+)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
values
values[10]
str_extrac(a,'(,+)(?=:)')
str_extract(a,'(,+)(?=:)')
str_view(a,'(,+)(?=:)')
str_view(a,'(.+)(?=:)')
#make column header list
headers=str_view(a,'(.+)(?=:)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
?data.frame
output=data.frame(headers=values )
View(output)
output=data.frame(values )
output=rbind(values)
View(output)
output=rbind(values)%>%colnames(headers)
colnames(output)<-headers
output=rbind(values)
length(headers)
#make column header list
headers=str_view(a,'(.+)(?=:)')
View(headers)
View(list)
View(headers)
#make column header list
headers=str_extract(a,'(.+)(?=:)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
output=data.frame(headers=values)
output=rbind(values)%>%colnames(headers)
output=rbind(values)
colnames(output)<-headers
#make column header list
headers=str_extract(d_list,'(.+)(?=:)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
output=data.frame(headers=values)
View(output)
output=rbindvalues)
output=rbind(values)
colnames(output)<-headers
View(output)
get_dict_items<-function(d){
#gets dictionary items from a single cell
#remove extraneous characters
dict<-str_remove_all(d,'[\\"\\{\\}]')
#split dict into list items
d_list<-unlist(str_split(dict,","))
#make column header list
headers=str_extract(d_list,'(.+)(?=:)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
output=rbind(values)
colnames(output)<-headers
return output
get_dict_items<-function(d){
#gets dictionary items from a single cell
#remove extraneous characters
dict<-str_remove_all(d,'[\\"\\{\\}]')
#split dict into list items
d_list<-unlist(str_split(dict,","))
#make column header list
headers=str_extract(d_list,'(.+)(?=:)')
#make value list
values<-str_extract(d_list,'(?<=:)(.+)')
output=rbind(values)
colnames(output)<-headers
return(output)
}
dict_to_df(d){
dict_to_df<-function(d){
output=data.frame()
for (i in length(d)){
new_row=get_dict_items(i)
}
}
df_test<-sample_n(df_raw)
df_test<-sample_n(df_raw,10)
dict_to_df<-function(d){
output=data.frame()
for (i in length(d)){
new_row=get_dict_items(i)
}
return(new_row)
}
dict_to_df(df_test)
dict_to_df<-function(d){
output=data.frame()
for (i in length(d)){
#new_row=get_dict_items(i)
print(i)
}
return(new_row)
}
df_test<-sample_n(df_raw,10)
dict_to_df(df_test)
dict_to_df<-function(d){
output=data.frame()
for (i in length(d)){
#new_row=get_dict_items(i)
print(i)
}
#return(new_row)
}
df_test<-sample_n(df_raw,10)
dict_to_df(df_test)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d))
output=data.frame()
print(i)
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
print(i)
}
#return(new_row)
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
new_row<-get_dict_items(d[i])
}
#return(new_row)
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
new_row<-get_dict_items(d[i])
}
print(new_row)
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
new_row<-get_dict_items(d[i])
print(new_row)
}
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
new_row<-get_dict_items(d[i])
rbind.fill(output,new_row)
}
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df<-function(d){
for (i in 1:length(d)){
output=data.frame()
new_row<-get_dict_items(d[i])
rbind.fill(output,new_row)
}
return(output)
}
df_test<-sample_n(df_raw,10)
df_list<-as.list(df_test$totals)
dict_to_df(df_list)
new_row<-get_dict_items(d[i])
new_row<-get_dict_items(d[1])
rbind.fill(output,new_row)
output=data.frame()
rbind.fill(output,new_row)
bind_rows(output,new_row)
output=new_row
bind_rows(output,new_row)
?bind_rows
bind_rows(list(output,new_row))
bind_rows(list(output,new_row))
bind_cols(output,new_row)
test<-bind_cols(output,new_row)
View(test)
test<-cbind(output,new_row)
test<-rbind.fill(output,new_row)
test<-cbind.fill(output,new_row)
unlink("proposal_cache", recursive = TRUE)
