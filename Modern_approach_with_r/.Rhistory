profit<-profit-loss
df_out<-rbind(df_out,profit)
}
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:10){
paste('iter:',i)
df<-profit_or_pay(n=10, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
pp_sim()
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:1000){
paste('iter:',i)
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-pp_sim()
for (i in 1:1000){
print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:1000){
print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-pp_sim()
hist(df)
View(df)
hist(df$`sum(bill)`)
mean(df$`sum(bill)`)
#see if you made money or lost money
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:100){
print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-pp_sim()
```{r}
#see if you made money or lost money
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:100){
print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-pp_sim()
#see if you made money or lost money
pp_sim<-function(TYPE='C'){
df_out<-data.frame(profit=double())
for (i in 1:100){
#print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-pp_sim()
hist(df$`sum(bill)`)
mean(df$`sum(bill)`)
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:100){
#print(paste('iter:',i))
df<-profit_or_pay(n=1000, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
round(2.11,0)
d=60
d-=1
d+=1
d=d-1
d
day_optimizer<-function(d=60){
df<-pp_sim(days=d)
while(round(mean(df$`sum(bill)`),0)!=0)
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:100){
#print(paste('iter:',i))
df<-profit_or_pay(n=100, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-profit_or_pay(TYPE='R')
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit-loss
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer(0)
day_optimizer()
day_optimizer()
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:100){
print(paste('iter:',i))
df<-profit_or_pay(n=100, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-profit_or_pay(TYPE='R')
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit-loss
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:100){
#print(paste('iter:',i))
df<-profit_or_pay(n=100, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:10){
#print(paste('iter:',i))
df<-profit_or_pay(n=10, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-profit_or_pay(TYPE='R')
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit-loss
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d-1
}else{
d=d+1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
if (mean(df$`sum(bill)`)<0){
d=d+1
}else{
d=d-1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
print(mean(df$sum(bill)))
if (mean(df$`sum(bill)`)<0){
d=d+1
}else{
d=d-1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
print(mean(df$`sum(bill)`))
if (mean(df$`sum(bill)`)<0){
d=d+1
}else{
d=d-1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
day_optimizer()
knitr::opts_chunk$set(echo = TRUE)
integrand<-function(x){1/((x+1)*sqrt(x))}
integrate(integrand, lower=0, upper=Inf)
integrand_res<-function(x){-.1909*x+101.7}
integrand_com<-function(x){-.1909*x+101.7}
integrand_res=function(x){(-1.909+.35664)*x+(101-99)}
max(dat$BILL)
min(dat$BILL)
-1.909+.35664
-.1909+.35664
install.packages('polynom')
library(polynom)
p<-(-1.909+.35664)*x+(101-99)
p<-polynomial(c((101-99),(-1.909+.35664)))
p<-polynomial(c((101-99-60),(-1.909+.35664)))
solve(p)
solve(1.66-58)
solve(1.66,58)
bill_60<-solve(1.66,58)
bill_60<-solve(.166,58)
(bill_60<-solve(.166,58))
(bill_60_commercial<-solve(-.19, (60-101.7)))
min<-min(dat$BILL)
max<-max(dat$BILL)
break<-bill_60
break<-bill_60_commercial
crossover<-bill_60_commercial
income<-integrate(integrand,lower=crossover,upper = max)
income
income<-integrate(integrand_com,lower=crossover,upper = max)
income
hist(dat%>%filter(TYPE=='COMMERCIAL'))
library(tidyverse)
hist(dat%>%filter(TYPE=='COMMERCIAL'))
dat%>%filter(TYPE=='COMMERCIAL')
hist(dat%>%filter(TYPE=='COMMERCIAL')%>%select(BILL))
dat%>%filter(TYPE=='COMMERCIAL')%>%select(BILL)
ggplot(dat%>%filter(TYPE=='COMMERCIAL'), aes(x=BILL))+geom_histogram()
cost_com<-dat%>%filter(TYPE='COMMERCIAL' & BILL>bill_60_commercial)
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
cost_com
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit=income_res-cost_res)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60)%>%summarize(sum(BILL))
(profit=income_res-cost_res)
(bill_60<-solve(.166,58))
#profit from commmercial debts
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60)%>%summarize(sum(BILL))
(profit=income_res-cost_res)
#profit from commmercial debts
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit_com=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60)%>%summarize(sum(BILL))
(profit_res=income_res-cost_res)
(profit_res+profit_com)
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
(profit_res+profit_com)
(profit_res+profit_com/(com_profit_pre_promo+res_profit_pre_promo))
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
(profit_res+profit_com/(com_profit_pre_promo+res_profit_pre_promo))
com_profit_pre_promo
profit_com
profit_promo<-profit_res+profit_com
profit_promo
profit_null<-com_profit_pre_promo+res_profit_pre_promo
profit_null
com_profit_pre_promo
profit_promo/profit_null
C=profit_null*1/percentage_income
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
profit_promo<-profit_res+profit_com
profit_null<-com_profit_pre_promo+res_profit_pre_promo
percentage_income<-profit_promo/profit_null
(C=profit_null*1/percentage_income)
(C/profit_null))
(C/profit_null)
knitr::opts_chunk$set(echo = TRUE)
file<-here('data','overdue.txt')
file<-here('data','overdue.txt')
library(here)
library(tidyverse)
file<-here('data','overdue.txt')
dat<-read.table(file, header=TRUE)
#create residential vs commercial factor
dat_res<-dat[1:48,]%>%mutate(TYPE='RESIDENTIAL')
dat_com<-dat[-(1:48),]%>%mutate(TYPE='COMMERCIAL')
dat<-rbind(dat_res, dat_com)
library(GGally)
ggpairs(dat, mapping=(aes(color=TYPE)))
summary(lm.full<-lm(LATE~BILL+TYPE, data=dat))
summary(lm.full<-lm(LATE~BILL, data=dat))
summary(lm.split<-lm(LATE~BILL+TYPE+TYPE:BILL:., data=dat))
anova(lm.full,lm.split)
(bill_60<-solve(.166,58))
(bill_60_commercial<-solve(-.19, (60-101.7)))
#profit from commmercial debts
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit_com=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60)%>%summarize(sum(BILL))
(profit_res=income_res-cost_res)
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
profit_promo<-profit_res+profit_com
profit_null<-com_profit_pre_promo+res_profit_pre_promo
percentage_income<-profit_promo/profit_null
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
profit_promo<-profit_res+profit_com
profit_null<-com_profit_pre_promo+res_profit_pre_promo
(percentage_income<-profit_promo/profit_null)
(C=profit_null*1/percentage_income)
(C/profit_null)
