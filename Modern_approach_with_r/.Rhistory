#get importance scores of the variables
imps <-attStats(rough_fix_mod)
imps2<- imps[imps$decision !='Rejected', c('meanImp','decision')]
head(imps2[order(-imps2$meanImp), ])  # descending sort
# Plot variable importance
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")
#model with selected features
model<-lm(Price~ParkerPoints+CoatesPoints+P95andAbove+FirstGrowth+CultWine)
summary(model)
model<-lm(Price~ParkerPoints+FirstGrowth+CultWine)
summary(model)
ggpairs(df)
View(df)
library(GGally)
ggpairs(df)
dat<-read.csv('./data/circulation.txt')
#tidying data
colnames(dat)<-'col_1'
df <- separate(data = dat, col = 'col_1', into = c('paper', 'sunday','weekday','competitor'), sep = '\\t')
df$weekday<-as.numeric(df$weekday)
df$sunday<-as.numeric(df$sunday)
df$competitor<-as.numeric(df$competitor)
library(GGally)
ggpairs(df)
View(df)
ggpairs(df%>%select(-paper))
library(here)
confood2 <- read.table(here('data',"confood2.txt"), header=TRUE)
attach(confood2)
#Figure 9.1 on page 306
par(mfrow=c(1,1))
plot(log(Price),log(Sales),xlab=expression(log(Price[t])),ylab=expression(log(Sales[t])),
pch=Promotion+2,col=Promotion+1)
legend(-0.3, 8.5,legend=c("No","Yes"),pch=2:3,col=1:2,title="Promotion")
#Figure 9.2 on page 307
plot(Week,log(Sales),type='o',ylab=expression(log(Sales[t])),xlab="Week, t",
pch=Promotion+2,col=Promotion+1)
#Figure 9.3 on page 307
plot(log(SalesLag1),log(Sales),ylab=expression(log(Sales[t])),
xlab=expression(log(Sales[t-1])))
#Figure 9.4 on page 308
acf(log(Sales))
#Figure 9.5 on page 309
lsm1 <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
StanRes1 <- rstandard(lsm1)
par(mfrow=c(2,2))
plot(log(Price),StanRes1,ylab="Standardized Residuals",xlab=expression(log(Price[t])))
plot(Week,StanRes1,ylab="Standardized Residuals",xlab="Week, t",type='o')
plot(Promotion,StanRes1,ylab="Standardized Residuals")
plot(lsm1$fitted.values,StanRes1,ylab="Standardized Residuals",xlab="Fitted Values")
#Figure 9.6 on page 310
par(mfrow=c(1,1))
acf(StanRes1,main="Series Standardized Residuals")
#R output on page 313
install.packages("nlme")
install.packages("nlme")
#R output on page 313
require("nlme")
library(nlme)
m1 <- gls(log(Sales)~log(Price)+Promotion+Week,correlation=corAR1(form=~Week),data=confood2,method="ML")
summary(m1)
intervals(m1)
#Figure 9.7 on page 314
acf(m1$residuals,main="Series GLS Residuals")
#R output on page 318
g <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
x <- model.matrix(g)
source("~/GitHub/business_analytics/Modern_approach_with_r/notes/Chapter9.R", echo=TRUE)
?model.matrix
summary(g)
summary(m1)
Sigma <- diag(length(Week))
rho <- 0.5504
x <- model.matrix(g)
Sigma <- diag(length(Week))
Sigma <- rho^abs(row(Sigma)-col(Sigma))
Sigma <- diag(length(confood2$Week))
Sigma <- rho^abs(row(Sigma)-col(Sigma))
sm <- chol(Sigma)
smi <- solve(t(sm))
?solve
xstar <- smi %*% x
ystar <- smi %*% log(Sales)
m1tls <- lm(ystar ~ xstar-1)
summary(m1tls)
summary(m1)
summary(m1tls)
summary(lsm1)
knitr::opts_chunk$set(echo = TRUE)
confood2<-read.table(here('data','confood2.txt'),header=TRUE)
g <- lm(log(Sales)~log(Price)+Promotion+Week,data=confood2)
summary(g)
m1 <- gls(log(Sales)~log(Price)+Promotion+Week,correlation=corAR1(form=~Week),data=confood2,method="ML")
summary(m1)
View(m1)
ddd<-summary(m1)
View(ddd)
ddd$coefficients
ddd
ddd$modelStruct
ddd$modelStruct$corStruct
ddd$modelStruct$corStruct[1]
ddd$modelStruct$corStruct[2]
ddd$modelStruct$corStruct[3]
mstruct<-ddd$modelStruct$corStruct
mstruct
mstruct[0]
mstruct[1]
class(mstruct)
mstruct$corAR1
view(mstruct)
length(mstruct)
mstruct
a<-print(mstruct)
a
unlist(mstruct)
a<-unlist(mstruct)
a
mstruct$Phi
mstruct[1]
as.numerict(mstruct)
as.numeric(mstruct)
sqrtu(mstruct)
sqrt(mstruct)
summary(m1)
#set Phi by looking, cant figure out how to get it out of the summary
rho<-.5504
x<-model.matrix(g)
View(x)
?model.matrix
x<-model.matrix(g)
View(x)
Sigma <- diag(length(confood2$Week))
View(Sigma)
row(Sigma)-col(Sigma)
Sigma <- rho^abs(row(Sigma)-col(Sigma))
Sigma
view(Sigma)
library(tidyverse)
view(Sigma)
view(as.data.frame(Sigma))
sm <- chol(Sigma)
view(as.data.frame(sm))
smi <- solve(t(sm))
view(as.data.frame(smi))
xstar <- smi %*% x
ystar <- smi %*% log(Sales)
ystar <- smi %*% log(confood$Sales)
ystar <- smi %*% log(confood2$Sales)
m1tls <- lm(ystar ~ xstar-1)
summary(m1tls)
knitr::opts_chunk$set(echo = TRUE)
boxCox(model)
bc<-boxCox(model)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
file<-here('data','nyc.csv')
dat<-read.csv(file)
library(GGally)
ggpairs(dat%>%select(c(Food, Decor, Service)))
lm.model<-lm(Price~.,data=dat%>%select(-c(Restaurant,Case)))
library(ggResidpanel)
resid_panel(lm.model, plots = 'all')
file<-here('data','nonlinearx.txt')
dat<-read.table(file, header=TRUE)
ggpairs(dat)
lm.model<-lm(y~.,data=dat)
library(ggResidpanel)
resid_panel(lm.model, plots = 'all')
resid_xpanel(lm.model)
library(car)
model<-lm(mpg~disp+hp+drat, data=mtcars)
summary(model)
avPlots(model)
library(tidyverse)
library(here)
file<-here('data','nyc.csv')
dat<-read.csv(file)
ggpairs(dat%>%select(-c(Restaurant,Case)))
model<-lm(Price~., data=dat%>%select(-c(Restaurant,Case)))
avPlots(model)
file<-here('data','defects.txt')
dat<-read.table(file,header=TRUE)
ggpairs(dat%>%select(Defective,Temperature,Density, Rate))
summary(model<-lm(Defective~Temperature+Density+Rate, data=dat%>%select(-Case)))
resid_panel(model, plots='all')
df=data.frame(y_hat=model$fitted.values,Defective=dat$Defective)
ggplot(df, aes(x=Defective, y=y_hat))+geom_point()+geom
df=data.frame(y_hat=model$fitted.values,Defective=dat$Defective)
ggplot(df, aes(x=Defective, y=y_hat))+geom_point()
boxCox(model)
bc<-boxCox(model)
(lambda<-bc$x[which.max(bc$y)])
summary(model_transform<-lm(sqrt(Defective)~Temperature+Density+Rate, data=dat))
file<-here('data','magazines.csv')
dat<-read_csv(file)
ggpairs(dat%>%select(c(AdRevenue,AdPages,SubRevenue,NewsRevenue)))
library(car)
dat<-dat%>%select(c(AdRevenue,AdPages,SubRevenue,NewsRevenue))
powerTransform(dat)
dat_2<-mutate_all(dat,log)
ggpairs(dat_2)
file<-here('data','circulation.txt')
dat<-read.table(file, sep="\t", header=TRUE)
df<-dat%>%select(-Newspaper)
df<-df%>%mutate_at(c("Sunday","Weekday"),log)
ggpairs(df)
summary(lm.model<-lm(Sunday~.,data=df))
(predictions<-predict(lm.model, newdata=data.frame(Weekday=c(log(210000),log(210000)),competitor=c(0,1)), interval = 'predict'))
as.data.frame(predictions)%>%mutate_all(.,exp)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
file<-here('data','MichelinFood.txt')
df<-read.table(file,header = TRUE)
df
df[6,]
ggplot(df, aes(x=Food,y=proportion))+geom_point()
df<-df%>%mutate(logit=log((proportion)/(1-proportion)))
ggplot(df, aes(x=proportion,y=logit))+geom_point()
glm.model<-glm(formula=cbind(InMichelin,NotInMichelin)~Food,family=binomial, data=df)
summary(glm.model)
library(ggResidpanel)
resid_panel(glm.model,plots='all')
range(df$Food)
#create sequence
xFood<-15:28
yFood<-predict(glm.model, list(Food=xFood), type='response')
ggplot(df, aes(x=Food, y=proportion))+geom_point()+geom_smooth(aes(x=xFood,y=yFood))
x<-round(xFood,3)
theta<-round(yFood,3)
odds<-round(yFood/(1-yFood),3)
cbind(x,theta,odds)
y = c(1,1,1,0,0,0)
a <- factor(1:length(y))
fit <- glm(y~a,family=binomial)
summary(fit)
resid_panel(fit)
yY=predict(fit, x=a, type = 'response')
ggplot(as.data.frame(cbind(y,a)), aes(x=a, y=y))+geom_point()+geom_smooth(aes(x=a,y=yY))
summary(glm.model)
pchisq(11.368,df=12, lower.tail = FALSE)
pchisq(50.059,df=1,lower.tail = FALSE)
anova(glm.model,update(glm.model,~1),test='Chisq')
(R_dev=1-11.368/61.427)
library(here)
file<-here('data','MichelinNy.csv')
df<-read.csv(file, header=TRUE)
ggplot(df, aes(x=Food, y=InMichelin))+geom_jitter(height=.1,width=.1)
ggplot(df,aes(x=as.factor(InMichelin),y=Food))+geom_boxplot()
summary(glm.model<-glm(formula=InMichelin~Food, family=binomial(),data=df))
file<-here('data','MichelinFood.txt')
df_1=read.table(file,header = TRUE)
glm.model_crosstab<-glm(formula=cbind(df_1$InMichelin,df_1$NotInMichelin)~Food,family=binomial, data=df_1)
summary(glm.model_crosstab)
anova(glm.model,update(glm.model,~1),test='Chisq')
library(ggpubr)
res_p<-residuals(glm.model,'pearson')
res<-residuals(glm.model)
a<-ggplot(df,aes(x=Food,y=res_p))+geom_point()+ggtitle('Pearson Residuals')
b<-ggplot(df,aes(x=Food,y=res))+geom_point()+ggtitle('standardized Residuals')
ggarrange(b,a)
#example
P_Y_1_x=.6
P_Y_0_x=.4
(theta_x=P_Y_1_x*1+P_Y_0_x*0)
(odds_x=P_Y_1_x/P_Y_0_x)
P_Y_1=mean(df$InMichelin==1)
P_Y_0=1-P_Y_1
df_y_1<-df%>%filter(InMichelin==1)
ggplot(df, aes(x=Food, y=InMichelin))+geom_jitter(height=.1,width=.1)+geom_density(aes(x=Food,y=..density..,color=as.factor(InMichelin),fill=as.factor(InMichelin),alpha=.5))
summary(glm.M_1<-glm(InMichelin~Food, family=binomial(),data=df))
beta_0<-as.numeric(glm.M_1$coefficients[1])
beta_1<-as.numeric(glm.M_1$coefficients[2])
x_1<-df$Food
plot(1/exp(-(beta_0+beta_1*x)))
base<-ggplot(df,aes(x=Food,y=InMichelin))+xlim(15,28)+geom_point()
f<-function(x) (1/(1+exp(-(beta_0+beta_1*x))))
p1<-base+geom_function(fun=f)
library(car)
summary(glm.full<-glm(InMichelin~(Food+Decor+Service+Price),family=binomial(),data=df))
ypredict<-predict(glm.full,type = 'response')
ggplot(df,aes(x=Food,y=ypredict))+geom_point()+geom_smooth(method='loess')+geom_function(fun=f,color='red')
mmps(glm.full)
summary(glm.full)
#m <- update(bigmodel, ~. - Age:Start - Number:Start -
glm.full<-update(glm.full,~.+log(Price))
#rerun marginal models
mmps(glm.full)
ggplot(df%>%group_by(InMichelin),aes(x=Decor,y=Service,color=factor(InMichelin) ))+geom_point()+geom_smooth(method='lm', se=TRUE)
glm.full_2<-glm(InMichelin~Food+Decor+Service+Price+log(Price)+Service:Decor, family=binomial(),data=df)
mmps(glm.full_2)
mmps(glm.full_2,span=3/4, layout = c(2,2))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
file<-here('data','profsalary.txt')
dat<-read.table(file, header = TRUE)
ggplot(dat, aes(x=Experience, y=Salary))+geom_point()
summary(lm.model<-lm(Salary~Experience, data=dat))
library(ggResidpanel)
resid_panel(lm.model, plots = 'all')
(summary(lm.model<-lm(Salary~Experience+I(Experience^2), data=dat)))
confint(lm.model)
predict(lm.model,newdata = data.frame(Experience=10), interval = 'predict' )
resid_panel(lm.model, plots='all')
file<-here('data','nyc.csv')
dat<-read.csv(file)
summary(lm.model<-lm(Price~., data=dat%>%select(-c(Case, Restaurant,Service))))
ggpairs(dat%>%select(-c(Case,Restaurant)))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
file<-here('data','profsalary.txt')
dat<-read.table(file, header = TRUE)
ggplot(dat, aes(x=Experience, y=Salary))+geom_point()
summary(lm.model<-lm(Salary~Experience, data=dat))
library(ggResidpanel)
resid_panel(lm.model, plots = 'all')
(summary(lm.model<-lm(Salary~Experience+I(Experience^2), data=dat)))
confint(lm.model)
predict(lm.model,newdata = data.frame(Experience=10), interval = 'predict' )
resid_panel(lm.model, plots='all')
file<-here('data','nyc.csv')
dat<-read.csv(file)
summary(lm.model<-lm(Price~., data=dat%>%select(-c(Case, Restaurant,Service))))
ggpairs(dat%>%select(-c(Case,Restaurant)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpairs)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(GGally)
library(here)
library(tidyverse)
file<-here('data','profsalary.txt')
dat<-read.table(file, header = TRUE)
ggplot(dat, aes(x=Experience, y=Salary))+geom_point()
summary(lm.model<-lm(Salary~Experience, data=dat))
library(ggResidpanel)
resid_panel(lm.model, plots = 'all')
(summary(lm.model<-lm(Salary~Experience+I(Experience^2), data=dat)))
confint(lm.model)
predict(lm.model,newdata = data.frame(Experience=10), interval = 'predict' )
resid_panel(lm.model, plots='all')
file<-here('data','nyc.csv')
dat<-read.csv(file)
summary(lm.model<-lm(Price~., data=dat%>%select(-c(Case, Restaurant,Service))))
ggpairs(dat%>%select(-c(Case,Restaurant)))
resid_panel(lm.model, plots = 'all')
file<-here('data','travel.txt')
dat<-read.table(file, sep="\t", header=TRUE)
dat$C<-as.factor(dat$C)
summary(lm.model<-lm(Amount~Age+C+Age:C, data=dat))
summary(lm.model1<-lm(Amount~Age, data=dat))
anova(lm.model,lm.model1)
file<-here('data','nyc.csv')
dat<-read.csv(file)
summary(lm.model1<-lm(Price~Food+Decor+Service+East+ Food:East + Decor:East + Service:East, data=dat))
summary(lm.full<-lm(Price~Food+Decor+East, data=dat))
anova(lm.full,lm.model1)
file<-here('data','overdue.txt')
dat<-read.table(file, header=TRUE)
#create residential vs commercial factor
dat_res<-dat[1:48,]%>%mutate(TYPE='RESIDENTIAL')
dat_com<-dat[-(1:48),]%>%mutate(TYPE='COMMERCIAL')
dat<-rbind(dat_res, dat_com)
library(GGally)
ggpairs(dat, mapping=(aes(color=TYPE)))
summary(lm.full<-lm(LATE~BILL+TYPE, data=dat))
summary(lm.split<-lm(LATE~BILL+TYPE+TYPE:BILL:., data=dat))
library(stats)
integrand_com<-function(x){-.1909*x+101.7}
integrand_res=function(x){(-1.909+.35664)*x+(101-99)}
ggplot(dat, aes(y=LATE,x=BILL, color=TYPE))+geom_point()
(bill_60<-solve(.166,58))
(bill_60_commercial<-solve(-.19, (60-101.7)))
#profit from commmercial debts
cost_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL<bill_60_commercial)%>%summarize(sum(BILL))
income_com<-dat%>%filter(TYPE=='COMMERCIAL' & BILL>bill_60_commercial)%>%summarize(sum(BILL))
(profit_com=income_com-cost_com)
#profits from residential debts
cost_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL>bill_60)%>%summarize(sum(BILL))
income_res<-dat%>%filter(TYPE=='RESIDENTIAL' & BILL<bill_60)%>%summarize(sum(BILL))
(profit_res=income_res-cost_res)
com_profit_pre_promo<-dat%>%filter(TYPE=='COMMERCIAL' )%>%summarize(sum(BILL))
res_profit_pre_promo<-profit_res
profit_promo<-profit_res+profit_com
profit_null<-com_profit_pre_promo+res_profit_pre_promo
percentage_income<-profit_promo/profit_null
(C=profit_null*1/percentage_income)
(C/profit_null)
#residential
anova(lm.full, lm.split)
predict(lm.split, newdata=data.frame(BILL=200, TYPE='COMMERCIAL'), interval='predict')
#mean and sd of commercial
com_mean<-dat%>%filter(TYPE=='COMMERCIAL')%>%group_by(TYPE)%>%summarise(bill_mean=mean(BILL),late_mean=mean(LATE))
com_sd<-dat%>%filter(TYPE=='COMMERCIAL')%>%group_by(TYPE)%>%summarise(bill_sdn=sd(BILL),late_sd=sd(LATE))
ls<-c('COMMERCIAL','RESIDENTIAL')
#getting metrics for distributions for creating random data for model
for (i in ls){
mean<-dat%>%filter(TYPE==i)%>%group_by(TYPE)%>%summarise(bill_mean=mean(BILL),late_mean=mean(LATE))
sd<-dat%>%filter(TYPE==i)%>%group_by(TYPE)%>%summarise(bill_sd=sd(BILL),late_sd=sd(LATE))
temp<-cbind(mean,sd[-1])
assign(i, temp)
}
dat_metrics<-rbind(COMMERCIAL,RESIDENTIAL)
gen_data<-function(dat_metrics=dat_metrics,TYPE='C'){
if (TYPE=='C'){
metrics<-dat_metrics%>%filter(TYPE=='COMMERCIAL')%>%select(-TYPE)
type_select='COMMERCIAL'
}
else{
metrics<-dat_metrics%>%filter(TYPE=='RESIDENTIAL')%>%select(-TYPE)
type_select='RESIDENTIAL'
}
bill_val<-rnorm(mean=metrics$bill_mean,sd=metrics$bill_sd,n=1)
late_val<-predict(lm.split, newdata=data.frame(BILL=bill_val, TYPE=type_select),interval = 'predict')
output<-rnorm(mean=late_val[1], sd=(late_val[1]-late_val[2])/2,n=1)
return(c('bill_val'=bill_val,'late_val'=output))
}
#generate dataframe of random values for simulation depending on TYPE
gen_frame<-function(gen_func=gen_data, data_metrics=data_metrics, TYPE='C',n=100){
output_frame=data.frame(bill=double(), late=double())
for (i in 1:n){
output_frame=rbind(output_frame, gen_func(data_metrics, TYPE=TYPE))
}
names(output_frame)<-c('bill','late')
return(output_frame)
}
#commercial frame with real data plotted
df_commercial<-gen_frame(gen_func = gen_data, data_metrics = dat_metrics)
ggplot(df_commercial, aes(x=bill,y=late))+geom_point(color='red')+geom_point(aes(x=BILL,y=LATE), data=dat%>%filter(TYPE=='COMMERCIAL'), color='blue')
df_residential<-gen_frame(gen_func = gen_data, data_metrics = dat_metrics,TYPE='R')
ggplot(df_residential, aes(x=bill,y=late))+geom_point(color='red')+geom_point(aes(x=BILL,y=LATE), data=dat%>%filter(TYPE=='RESIDENTIAL'), color='blue')
profit_or_pay<-function(n=1000,TYPE='C', days=60){
df<-gen_frame(gen_func = gen_data, data_metrics = dat_metrics,TYPE=TYPE)
df<-df%>%mutate(PROFIT=case_when(
late>days ~0,
late<days ~1
))
return(df)
}
#see if you made money or lost money
pp_sim<-function(TYPE='C', days=d){
df_out<-data.frame(profit=double())
for (i in 1:10){
#print(paste('iter:',i))
df<-profit_or_pay(n=10, TYPE=TYPE,days=d)
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit<-profit-loss
df_out<-rbind(df_out,profit)
}
return(df_out)
}
df<-profit_or_pay(TYPE='R')
profit<-df%>%filter(PROFIT==1)%>%summarise(sum(bill))
loss<-df%>%filter(PROFIT==0)%>%summarise(sum(bill))
profit-loss
day_optimizer<-function(d=60){
print('day optimizer running')
df<-pp_sim(days=d)
i=1
while(round(mean(df$`sum(bill)`),0)!=0){
df<-pp_sim(days=d)
print('while loop started')
print(paste('iter:',i,'days:',d))
print(mean(df$`sum(bill)`))
if (mean(df$`sum(bill)`)<0){
d=d+1
}else{
d=d-1
}
i=i+1
}
print(paste('the optimal number of days is:',d))
}
library(stats)
integrand<-function(x){1/((x+1)*sqrt(x))}
integrate(integrand, lower=0, upper=Inf)
knitr::opts_chunk$set(echo = TRUE)
dat<-read.csv('./data/confood1.txt',sep='\t')
dat<-read.csv(here('data','confood.txt'),sep='\t')
dat<-read.csv(here('data','confood1.txt'),sep='\t')
ggplot(dat, aes(x=Price,y=Sales))+geom_point()+geom_smooth(method='lm')
ggplot(dat, aes(x=log(Price),y=log(Sales)))+geom_point()+geom_smooth(method='lm')
summary(lm.model<-lm(log(Sales)~log(Price),data=dat))
resid_panel(lm.model, plots='resid',type='standardized')
dat<-read.csv('./data/responsetransformation.txt',sep='\t')
dat<-read.csv(here('data','responsetransformation.txt'),sep='\t')
ggplot(dat, aes(x,y))+geom_point()
lm.model<-lm(y~x,data=dat)
resid_panel(lm.model, plots=c('resid','ls'))
#setwd("C:/Program Files/GitHub/business_analytics/Modern_approach_with_r/data/salarygov.txt")
dat<-read.table(here('data',"salarygov.txt")
lm.model<-lm(MaxSalary~Score,data=dat)
View(dat_2)
View(dat_com)
dat<-read.table(here('data',"salarygov.txt"),header=TRUE)
lm.model<-lm(MaxSalary~Score,data=dat)
library(ggResidpanel)
resid_panel(lm.model)
library(car)
powerTransform(cbind(dat$MaxSalary,dat$Score))
summary(lm.model<-lm(log(MaxSalary)~sqrt(Score),data=dat))
resid_panel(lm.model, plots = 'all')
?I
??clean_names
knitr::opts_chunk$set(echo = TRUE)
ggplot(df, aes(x=Food, y=proportion))+geom_point()#+geom_smooth(aes(x=xFood,y=yFood))
